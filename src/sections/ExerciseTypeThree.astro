---
import ExerciseTypeThreeCodeLine from "../components/ExerciseTypeThreeCodeLine.astro";
import ExerciceTypeThreeHole from "../components/ExerciceTypeThreeHole.astro";
import NextExercise from "../components/NextExercise.astro";


const { body, head, exercicesInThisLesson, id, indexOfLesson } = Astro.props;
const actualIndexOfEx = exercicesInThisLesson.findIndex((ex) => ex.id === id);
---

<div class="flex gap-1 w-full h-full">
  <main class="flex flex-col w-full h-full justify-center px-12">
    <div class="w-full flex flex-col gap-">
      <a
        id="volverALeccion"
        href={`/lecciones/${head.lection.slug}`}
        class="hover:underline underline-offset-2">Volver a ver la leccion</a
      >

      <h1 class="text-5xl font-bold">
        {head.title}
      </h1>
      <span class="max-w-xl mt-2 ml-2 text-gray-200">
        {body.description}
      </span>
    </div>
    <ul id="dragable" class="mt-12 flex gap-2">
      {
        body.bloques.map((bloque) => {
          return <ExerciseTypeThreeCodeLine bloque={bloque} />;
        })
      }
    </ul>
  </main>
  <aside class="h-full w-2/5 bg-gray-800">
    <ul id="dropZones" class="w-full p-4 flex flex-col">
      {
        body.bloques.map(() => {
          return <ExerciceTypeThreeHole />;
        })
      }
    </ul>
    <button
      id="checkExercice"
      class="hidden w-32 h-11 bg-green-800 rounded-xl text-xl absolute bottom-12 right-[20em] place-content-center hover:scale-105 duration-200"
      >Enviar</button
    >
    
    <NextExercise
    indexOfLesson={indexOfLesson}
    actualIndexOfEx={actualIndexOfEx}
    exercicesInThisLesson={exercicesInThisLesson}
  />
  </aside>
</div>

<style>
  button.active {
    display: grid !important;
  }
</style>

<script
  src="https://cdnjs.cloudflare.com/ajax/libs/dragula/3.7.3/dragula.min.js"
  defer></script>
<script defer>
  const $checkExercice = document.getElementById("checkExercice");

  const activeGoNext = () => {
    document.getElementById("goNextExercice")?.classList.add("active");
  };

  const areAllHolesCompleted = () => {
    const $dropZones = document.querySelectorAll(".drop-zone");
    let unusedHoles = $dropZones.length;
    $dropZones.forEach(($dropZone) => {
      if ($dropZone.children.length > 0) {
        unusedHoles--;
      }
    });
    if (unusedHoles === 0) return true;

    return false;
  };
  const isAValidTarget = (target, source) => {
    if (target && target.classList.contains("drop-zone")) {
      if (source && source !== target) {
        return true;
      }
      return false;
    }

    return false;
  };

  const swapChildrens = (targetChildren, target, source) => {
    if (targetChildren.length > 1) {
      const targetChild = targetChildren[0];
      target.removeChild(targetChild);
      source.appendChild(targetChild);
    }
  };

  document.addEventListener("DOMContentLoaded", () => {
    const dragable = document.querySelector("#dragable");
    const dropZones = Array.from(document.querySelectorAll(".drop-zone"));

    const drake = dragula([dragable, ...dropZones], {
      revertOnSpill: true,
    });

    drake.on("drop", (el, target, source, sibling) => {
      if (isAValidTarget(target, source)) {
        const targetChildren = Array.from(target.children);
        swapChildrens(targetChildren, target, source);

        if (areAllHolesCompleted()) {
          $checkExercice.classList.add("active");
        } else {
          $checkExercice.classList.remove("active");
        }
      }
    });
  });

  const checkExercice = () => {
    passed = true;
    const $dropZones = document.getElementById("dropZones");

    for (let i = 0; i < $dropZones.children.length; i++) {
      const $dropZone = dropZones.children[i];
      const elemInThisDropZone = $dropZone.children[0];
      if (elemInThisDropZone.dataset.order != i + 1) {
        passed = false;
      }
    }

    if (passed){
      activeGoNext()
    }
  };
  $checkExercice.addEventListener("click", checkExercice);
</script>
