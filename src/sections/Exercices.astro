---
import { getCollection, getEntry } from "astro:content";
import ExercicesOfSameLessonContainer from "../components/ExercicesOfSameLessonContainer.astro";
import FiltersForExercices from "./FiltersForExercices.astro";
let exercises = await getCollection("ejercicios");

//Agrupar los ejercicios segun la leccion a al que pertenecen
const exercisesByLesson = {};
for (const exercise of exercises) {
  const lessonSlug = exercise.data.head.lection.slug;
  if (!exercisesByLesson[lessonSlug]) {
    exercisesByLesson[lessonSlug] = [];
  }
  exercisesByLesson[lessonSlug].push(exercise);
}
const lessons = await getCollection("lecciones");

const filters = ["Unica Opcion", "Multiple Opcion", "Arrastra"];
---

<!-- <FiltersForExercices filters={filters} /> -->
<main class="max-w-[1206px] mx-auto grid grid-cols-5 mb-24 mt-24 gap-14">
  {
    Object.entries(exercisesByLesson).map(async ([lessonSlug, exercises], index) => {
      let cols = await getEntry("lecciones", lessonSlug).then((l) => l.data.exerciceCols);
      return (
        <ExercicesOfSameLessonContainer
          key={index}
          lesson={lessons.find((l) => l.slug === lessonSlug)?.data.title}
          lessonUrl={lessonSlug}
          exercices={exercises}
          classList={`col-span-${cols}`}
        />
      );
    })
  }
</main>

<style>
  main {
    grid-template-rows: repeat(3, 217px);
  }
</style>

<script>
  import ScrollReveal from "scrollreveal";

  var slideUp = {
    distance: "120%",
    origin: "bottom",
    opacity: 0.5,
    duration: 500,
    scale: 0.85,
  };
  ScrollReveal().reveal(".lection", slideUp);
</script>
