---
const { title, site } = Astro.props;
import { comandos } from "../lib/comandos";
import { Claro } from "../lib/Oscuro/Claro.astro"

const categorias = Array.from(
  new Set(comandos.map((comando) => comando.category))
);
---

<!-- <section
  class="z-50 idden md:flex fixed bottom-0 left-0 w-full h-12 items-center justify-center gap-1 bg-[#0D0F18] border-t border-[#494949] text-center"
>
  Presiona <kbd>cmd</kbd> + <kbd>k</kbd> para abrir los comandos.
</section> -->
<div
  id="keyboard-manager-modal"
  data-open="false"
  class="z-50 fixed left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-[35em] h-[20em] bg-[#15181F] border-2 p-2 border-slate-600 rounded-lg"
>
  <header
    class="flex justify-between items-center border-b border-[#494949] px-4 py-2"
  >
    <h2 class="text-2xl">{title}</h2>
    <input
      autocomplete="none"
      id="buscarComando"
      type="text"
      placeholder="Buscar"
      class="border border-[#494949] rounded-lg px-2 bg-[#0D0F18] w-56 h-8 focus:outline-none"
    />
  </header>
  <ul class="px-4 py-2 flex flex-col gap-2 overflow-y-auto max-h-[16em]">
    {
      (
        <div class="flex flex-col gap-1">
          {comandos.map((comando) => (
            <li
              class="comando px-2 py-1 rounded-md"
              data-selected="false"
              data-option={comando.name}
              data-site={site}
            >
              <h3 class="text-xl">{comando.name}</h3>
              <p class="text-sm text-[#9B959E]">{comando.description}</p>
            </li>
          ))}
        </div>
      )
    }
  </ul>
</div>
<script>
  import { commands, Command } from "../lib/comandos";

  let selectedIndex = 0;
  let isModalOpen = false;

  const setElementsToCommands = () => {
    const commandsElements = document.querySelectorAll(
      ".comando"
    ) as NodeListOf<HTMLLIElement>;
    commandsElements.forEach((comandoElement) => {
      const { option: name } = comandoElement.dataset;
      const command = commands.find((comando) => comando.name === name);

      command?.setElement(comandoElement);
    });
  };

  setElementsToCommands();
  const getSiteCommands = () => {
    const siteCommands = [] as Command[];
    for (const command of commands) {
      if (
        command.site == "todos" ||
        command.getElement()?.dataset.site == command.site
      ) {
        siteCommands.push(command);
      } else {
        command.changeVisibility(false);
      }
    }

    return siteCommands;
  };
  const getActiveCommands = () => {
    const siteCommands = getSiteCommands();
    if (!siteCommands) return;

    return Array.from(siteCommands.filter((comando) => comando.visibility));
  };

  const executeCommand = ({ commandName }: { commandName: string }) => {
    const actualCommand = commands.find(
      (comando) => comando.name === commandName
    );

    actualCommand?.run();
  };

  const initComandosElements = () => {
    const activeCommands = getActiveCommands();
    if (!activeCommands) return;

    activeCommands[selectedIndex].setSelected(true);

    activeCommands.forEach((command) => {
      command.getElement()?.addEventListener("click", () => {
        executeCommand({ commandName: command.name });
      });
    });
  };

  const handleMoveOnPressKey = ({ direction }: { direction: number }) => {
    const activeCommands = getActiveCommands();
    if (!activeCommands) return;

    activeCommands[selectedIndex].setSelected(false);
    selectedIndex = (selectedIndex + direction) % activeCommands.length;
    activeCommands[selectedIndex].setSelected(true);

    activeCommands[selectedIndex].getElement()?.scrollIntoView({
      behavior: "smooth",
      block: "center",
    });
  };

  const searchInput = document.getElementById("buscarComando");
  const OPEN_MODAL_COMMAND_KEY = "k";

  document.addEventListener("DOMContentLoaded", () => {
    document.addEventListener("keydown", (event) => {
      const isCtrlPressed = event.metaKey || event.ctrlKey;

      if (isCtrlPressed && event.key === OPEN_MODAL_COMMAND_KEY) {
        event.preventDefault();
        initComandosElements();

        const keyboardManagerModal = document.getElementById(
          "keyboard-manager-modal"
        );
        if (!keyboardManagerModal) return;

        keyboardManagerModal.dataset.open =
          keyboardManagerModal.dataset.open === "true" ? "false" : "true";

        isModalOpen = keyboardManagerModal.dataset.open == "true";

        if (isModalOpen && searchInput) {
          searchInput.focus();
        }
      } else if (event.key === "ArrowDown" && isModalOpen) {
        event.preventDefault();
        handleMoveOnPressKey({ direction: 1 });
      } else if (event.key === "ArrowUp" && isModalOpen) {
        event.preventDefault();
        handleMoveOnPressKey({ direction: -1 });
      } else if (event.key === "Enter" && isModalOpen) {
        const activeCommands = getActiveCommands();
        if (!activeCommands) return;
        const command = activeCommands[selectedIndex];

        executeCommand({ commandName: command.name });
      }
    });
  });

  // Búsqueda de comandos:
  searchInput?.addEventListener("input", (event) => {
    const searchTerm = (event.target as HTMLInputElement).value.toLowerCase();

    const activeCommands = getSiteCommands();
    if (!activeCommands) return;

    activeCommands.forEach((command) => {
      const comandoName = command.name.toLowerCase();

      const comandoDescription = command.description.toLowerCase();

      if (
        comandoName.includes(searchTerm) ||
        comandoDescription.includes(searchTerm)
      ) {
        command.changeVisibility();
      } else {
        command.changeVisibility(false);
        command.setSelected(false);
      }
    });

    // Reiniciar el índice seleccionado cuando se realiza una nueva búsqueda
    selectedIndex = 0;
    initComandosElements();
  });
</script>

<style>
  #keyboard-manager-modal[data-open="true"] {
    display: block;
  }

  #keyboard-manager-modal[data-open="false"] {
    display: none;
  }

  kbd {
    padding: 0.1em 0.5em;
    border: 1px solid #494949;
    background-color: #15181f;
    border-radius: 5px;
  }

  .comando[data-selected="true"] {
    background-color: #2c3242;
  }
</style>
