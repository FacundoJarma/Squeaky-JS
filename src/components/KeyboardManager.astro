---
const { title, site } = Astro.props;
import { comandos } from "../lib/comandos";

const categorias = Array.from(
  new Set(comandos.map((comando) => comando.category))
);
---

<!-- <section
  class="z-50 idden md:flex fixed bottom-0 left-0 w-full h-12 items-center justify-center gap-1 bg-[#0D0F18] border-t border-[#494949] text-center"
>
  Presiona <kbd>cmd</kbd> + <kbd>k</kbd> para abrir los comandos.
</section> -->
<div
  id="keyboard-manager-modal"
  data-open="false"
  class="z-50 fixed left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-[35em] h-[20em] bg-[#15181F] border-2 p-2 border-slate-600 rounded-lg"
>
  <header
    class="flex justify-between items-center border-b border-[#494949] px-4 py-2"
  >
    <h2 class="text-2xl">{title}</h2>
    <input
      autocomplete="none"
      id="buscarComando"
      type="text"
      placeholder="Buscar"
      class="border border-[#494949] rounded-lg px-2 bg-[#0D0F18] w-56 h-8 focus:outline-none"
    />
  </header>
  <ul class="px-4 py-2 flex flex-col gap-2 overflow-y-auto max-h-[16em]">
    {
      categorias.map((category) => (
        <div class="flex flex-col gap-1">
          <h4 class="text-lg text-gray-300">{category}</h4>
          {comandos
            .filter(
              (comando) =>
                comando.category === category &&
                (comando.site === site || comando.site == "todos")
            )
            .map((comando) => (
              <li
                class="comando px-2 py-1 rounded-md"
                data-selected="false"
                data-option={comando.name}
              >
                <h3 class="text-xl">{comando.name}</h3>
                <p class="text-sm text-[#9B959E]">{comando.description}</p>
              </li>
            ))}
        </div>
      ))
    }
  </ul>
</div>
<script>
  import { comandos } from "../lib/comandos";

  let selectedIndex = 0;
  let open = false;

  const getComandosElements = () => {
    return Array.from(document.querySelectorAll(".comando")).filter(
      (comandoElement) => comandoElement.style.display !== "none"
    );
  };

  const initComandosElements = () => {
    const comandosElements = getComandosElements();
    if (!comandosElements) return;

    comandosElements[selectedIndex].setAttribute("data-selected", "true");

    comandosElements.forEach((comandoElement) => {
      comandoElement.addEventListener("click", () => {
        const comandoName = comandoElement.dataset.option;
        const comando = comandos.find((c) => c.name === comandoName);
        if (comando && typeof comando.action === "function") {
          comando.action();
        }
      });
    });
  };

  initComandosElements();
  const input = document.getElementById("buscarComando");

  document.addEventListener("DOMContentLoaded", () => {
    document.addEventListener("keydown", (event) => {
      const comandosElements = getComandosElements();

      if ((event.metaKey || event.ctrlKey) && event.key === "k") {
        const keyboardManagerModal = document.getElementById(
          "keyboard-manager-modal"
        );
        event.preventDefault();

        if (!keyboardManagerModal) return;

        keyboardManagerModal.dataset.open =
          keyboardManagerModal.dataset.open === "true" ? "false" : "true";

        open = keyboardManagerModal.dataset.open === "true";

        if (open) {
          input?.focus();
        }
      } else if (event.key === "ArrowDown" && open) {
        event.preventDefault();
        comandosElements[selectedIndex].setAttribute("data-selected", "false");
        selectedIndex = (selectedIndex + 1) % comandosElements.length;
        comandosElements[selectedIndex].setAttribute("data-selected", "true");

        comandosElements[selectedIndex].scrollIntoView({
          behavior: "smooth",
          block: "center",
        });
      } else if (event.key === "ArrowUp" && open) {
        event.preventDefault();
        comandosElements[selectedIndex].setAttribute("data-selected", "false");
        selectedIndex =
          (selectedIndex - 1 + comandosElements.length) %
          comandosElements.length;
        comandosElements[selectedIndex].setAttribute("data-selected", "true");

        comandosElements[selectedIndex].scrollIntoView({
          behavior: "smooth",
          block: "center",
        });
      } else if (event.key === "Enter" && open) {
        const comandoElement = comandosElements[selectedIndex];
        const comandoName = comandoElement.dataset.option;
        const comando = comandos.find((c) => c.name === comandoName);
        if (comando && typeof comando.action === "function") {
          comando.action();
        }
      }
    });
  });

  // Búsqueda de comandos:
  input?.addEventListener("input", (event) => {
    const value = (event.target as HTMLInputElement).value.toLowerCase();

    document.querySelectorAll(".comando").forEach((comandoElement) => {
      const comandoName = comandoElement
        .querySelector("h3")
        .innerText.toLowerCase();
      const comandoDescription = comandoElement
        .querySelector("p")
        .innerText.toLowerCase();

      if (comandoName.includes(value) || comandoDescription.includes(value)) {
        comandoElement.style.display = "block";
      } else {
        comandoElement.style.display = "none";
        comandoElement.setAttribute("data-selected", "false");
      }
    });

    // Reiniciar el índice seleccionado cuando se realiza una nueva búsqueda
    selectedIndex = 0;
    initComandosElements();
  });
</script>

<style>
  #keyboard-manager-modal[data-open="true"] {
    display: block;
  }

  #keyboard-manager-modal[data-open="false"] {
    display: none;
  }

  kbd {
    padding: 0.1em 0.5em;
    border: 1px solid #494949;
    background-color: #15181f;
    border-radius: 5px;
  }

  .comando[data-selected="true"] {
    background-color: #2c3242;
  }
</style>
